import collections.abc
import typing
from typing import overload

class BFIndex:
    num_threads: int
    def __init__(self, space: str, dim: typing.SupportsInt) -> None: ...
    def add_items(self, data: object, ids: object = ...) -> None: ...
    def delete_vector(self, label: typing.SupportsInt) -> None: ...
    def get_current_count(self) -> int: ...
    def get_max_elements(self) -> int: ...
    def init_index(self, max_elements: typing.SupportsInt) -> None: ...
    def knn_query(self, data: object, k: typing.SupportsInt = ..., num_threads: typing.SupportsInt = ..., filter: collections.abc.Callable[[typing.SupportsInt], bool] = ...) -> object: ...
    def load_index(self, path_to_index: str, max_elements: typing.SupportsInt = ...) -> None: ...
    def save_index(self, path_to_index: str) -> None: ...
    def set_num_threads(self, num_threads: typing.SupportsInt) -> None: ...

class Index:
    ef: int
    num_threads: int
    @overload
    def __init__(self, params: dict) -> None: ...
    @overload
    def __init__(self, index: Index) -> None: ...
    @overload
    def __init__(self, space: str, dim: typing.SupportsInt) -> None: ...
    def add_items(self, data: object, ids: object = ..., num_threads: typing.SupportsInt = ..., replace_deleted: bool = ...) -> None: ...
    def get_current_count(self) -> int: ...
    def get_ids_list(self) -> list[int]: ...
    def get_items(self, ids: object = ..., return_type: str = ...) -> object: ...
    def get_max_elements(self) -> int: ...
    def index_file_size(self) -> int: ...
    def init_index(self, max_elements: typing.SupportsInt, M: typing.SupportsInt = ..., ef_construction: typing.SupportsInt = ..., random_seed: typing.SupportsInt = ..., allow_replace_deleted: bool = ...) -> None: ...
    def knn_query(self, data: object, k: typing.SupportsInt = ..., num_threads: typing.SupportsInt = ..., filter: collections.abc.Callable[[typing.SupportsInt], bool] = ...) -> object: ...
    def load_index(self, path_to_index: str, max_elements: typing.SupportsInt = ..., allow_replace_deleted: bool = ...) -> None: ...
    def mark_deleted(self, label: typing.SupportsInt) -> None: ...
    def resize_index(self, new_size: typing.SupportsInt) -> None: ...
    def save_index(self, path_to_index: str) -> None: ...
    def set_ef(self, ef: typing.SupportsInt) -> None: ...
    def set_num_threads(self, num_threads: typing.SupportsInt) -> None: ...
    def unmark_deleted(self, label: typing.SupportsInt) -> None: ...
    @property
    def M(self) -> int: ...
    @property
    def dim(self) -> int: ...
    @property
    def ef_construction(self) -> int: ...
    @property
    def element_count(self) -> int: ...
    @property
    def max_elements(self) -> int: ...
    @property
    def space(self) -> str: ...
