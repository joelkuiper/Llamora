from . import adjacency_graphs as adjacency_graphs
from _typeshed import Incomplete
from zxcvbn import scoring as scoring
from zxcvbn.frequency_lists import FREQUENCY_LISTS as FREQUENCY_LISTS
from zxcvbn.scoring import most_guessable_match_sequence as most_guessable_match_sequence

def build_ranked_dict(ordered_list): ...

RANKED_DICTIONARIES: Incomplete

def add_frequency_lists(frequency_lists_) -> None: ...

GRAPHS: Incomplete
L33T_TABLE: Incomplete
REGEXEN: Incomplete
DATE_MAX_YEAR: int
DATE_MIN_YEAR: int
DATE_SPLITS: Incomplete

def omnimatch(password, _ranked_dictionaries=...): ...
def dictionary_match(password, _ranked_dictionaries=...): ...
def reverse_dictionary_match(password, _ranked_dictionaries=...): ...
def relevant_l33t_subtable(password, table): ...
def enumerate_l33t_subs(table): ...
def translate(string, chr_map): ...
def l33t_match(password, _ranked_dictionaries=..., _l33t_table=...): ...
def repeat_match(password, _ranked_dictionaries=...): ...
def spatial_match(password, _graphs=..., _ranked_dictionaries=...): ...

SHIFTED_RX: Incomplete

def spatial_match_helper(password, graph, graph_name): ...

MAX_DELTA: int

def sequence_match(password, _ranked_dictionaries=...): ...
def regex_match(password, _regexen=..., _ranked_dictionaries=...): ...
def date_match(password, _ranked_dictionaries=...): ...
def map_ints_to_dmy(ints): ...
def map_ints_to_dm(ints): ...
def two_to_four_digit_year(year): ...
