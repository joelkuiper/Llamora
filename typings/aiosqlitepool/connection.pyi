from .protocols import Connection as Connection
from _typeshed import Incomplete
from typing import Awaitable, Callable

class PoolConnection:
    raw_connection: Incomplete
    idle_since: float | None
    def __init__(self, connection: Connection) -> None: ...
    @classmethod
    async def create(cls, connection_factory: Callable[[], Awaitable[Connection]]) -> PoolConnection: ...
    @property
    def id(self) -> str: ...
    def mark_as_in_use(self) -> None: ...
    def mark_as_idle(self) -> None: ...
    @property
    def idle_time(self) -> float: ...
    async def is_alive(self) -> bool: ...
    async def reset(self) -> None: ...
    async def close(self) -> None: ...
