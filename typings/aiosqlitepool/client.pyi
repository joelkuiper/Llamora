from .pool import Pool as Pool
from .protocols import Connection as Connection
from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import asynccontextmanager
from typing import Awaitable, Callable

class SQLiteConnectionPool:
    def __init__(self, connection_factory: Callable[[], Awaitable[Connection]], pool_size: int | None = 5, acquisition_timeout: int | None = 30, idle_timeout: int | None = 86400, operation_timeout: int | None = 10) -> None: ...
    @asynccontextmanager
    async def connection(self) -> Generator[Incomplete]: ...
    async def close(self) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None: ...
